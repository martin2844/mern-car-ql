{"version":3,"sources":["queries/queries.js","components/CarDetails.js","components/CarList.js","components/AddCar.js","App.js","index.js"],"names":["getMakeQuery","gql","getCarQuery","addCarMutation","getSingleCarQuery","CarDetails","car","this","props","data","maker","name","model","manufactureDate","type","country","foundedDate","className","cars","map","key","id","console","log","displayCarDetails","Component","graphql","options","variables","carId","CarList","state","selected","loading","style","margin","display","size","onClick","e","setState","displayCars","AddCar","makeId","disabled","makes","make","value","preventDefault","parseInt","refetchQueries","query","onSubmit","submitForm","bind","onChange","target","displayMakes","marginTop","shape","compose","client","ApolloClient","uri","App","Title","Typography","level","React","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.e3acce21.chunk.js","sourcesContent":["import { gql } from 'apollo-boost';\r\n\r\n\r\n\r\nconst getMakeQuery = gql`\r\n\r\n{\r\n    makes {\r\n        name\r\n        id\r\n        country\r\n    }\r\n}\r\n\r\n`\r\nconst getCarQuery = gql`\r\n    {\r\n        cars {\r\n            maker {\r\n              name\r\n            }\r\n            model\r\n            type\r\n            manufactureDate\r\n            id\r\n          }\r\n    }\r\n`\r\n//mutation contains query variables\r\nconst addCarMutation = gql`\r\nmutation($model: String!, $type: String!, $manufactureDate: Int!, $makeId: ID!) {\r\n    addCar(model: $model, type: $type, manufactureDate:$manufactureDate, makeId: $makeId) {\r\n        model\r\n        id\r\n    }\r\n}\r\n`\r\n\r\nconst getSingleCarQuery = gql`\r\n\r\nquery($id: ID){\r\n    car(id: $id){\r\n        id\r\n        model\r\n        type\r\n        manufactureDate\r\n        maker {\r\n            name\r\n            foundedDate\r\n            country\r\n            id\r\n            cars {\r\n                model\r\n                type\r\n            }\r\n        }\r\n    }\r\n}\r\n`\r\n\r\nexport {getMakeQuery, getCarQuery, addCarMutation, getSingleCarQuery}","import React, { Component } from 'react';\r\nimport { graphql } from '@apollo/react-hoc';\r\nimport { getSingleCarQuery } from '../queries/queries';\r\n\r\n\r\nclass CarDetails extends Component {\r\n\r\n    displayCarDetails(){\r\n        const { car } = this.props.data;\r\n        if(car){\r\n            return (\r\n                <div>\r\n                    <h2>{car.maker.name} {car.model}</h2>\r\n                    <p>{car.manufactureDate} {car.type}</p>\r\n                    <p>{car.maker.name} is a brand from {car.maker.country}, founded in {car.maker.foundedDate}</p>\r\n                    <p>Other Cars:</p>\r\n                    <ul className=\"other-cars\">\r\n                     {car.maker.cars.map(car => <li key={car.id}>{car.model} - {car.type}</li>)} \r\n                    </ul>\r\n                </div>\r\n            );\r\n        } else {\r\n            return(\r\n                <div>Select a car!</div>\r\n            )\r\n        }\r\n    }\r\n\r\n    render() {\r\n    \r\n        //this.props because its a class component. check\r\n        console.log(this.props)\r\n        return (\r\n            <div id=\"book-details\">\r\n                {this.displayCarDetails()}\r\n                \r\n            </div>\r\n        )\r\n    }\r\n}\r\n// we can pass a second parameter to the query, as an object, with an options\r\n// value as \r\nexport default graphql(getSingleCarQuery, {\r\noptions: (props) => {\r\n    return {\r\n        variables: { \r\n            id: props.carId\r\n        }\r\n    }\r\n}\r\n})(CarDetails);","import React, { Component } from 'react';\r\nimport { graphql } from '@apollo/react-hoc';\r\nimport { getCarQuery } from '../queries/queries';\r\nimport CarDetails from './CarDetails'\r\nimport { Button, Spin, Divider } from 'antd';\r\n\r\n\r\nclass CarList extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            selected: null,\r\n        }\r\n    }\r\n\r\n    displayCars(){\r\n        let data = this.props.data;\r\n        if(data.loading){\r\n            return(\r\n             \r\n\r\n                   <Spin style={{margin: \"0 auto\", display: \"block\"}} size=\"large\" />\r\n            \r\n            )\r\n        } else {\r\n            return(\r\n                data.cars.map((car) => {\r\n                    return (\r\n                        \r\n                        <Button style={{margin: \"20px\"}} onClick={(e) => {this.setState({selected: car.id})}} key={car.id}>{car.model}</Button>\r\n                    )\r\n                })\r\n            )\r\n        }\r\n    }\r\n\r\n\r\n    render() {\r\n        //this.props because its a class component. check\r\n        return (\r\n            <div id=\"car-list\">\r\n                <div>\r\n                {this.displayCars()}\r\n                </div>\r\n                <Divider />\r\n                <CarDetails carId={this.state.selected}/>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default graphql(getCarQuery)(CarList);","import React, { Component } from 'react'\r\nimport { graphql } from '@apollo/react-hoc';\r\nimport { getMakeQuery, addCarMutation, getCarQuery } from '../queries/queries';\r\nimport compose from \"lodash.flowright\";\r\nimport { Icon, Divider } from 'antd';\r\n\r\n\r\nclass AddCar extends Component {\r\n    //set in state of the object\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            model: \"\",\r\n            type: \"\",\r\n            manufactureDate: \"\",\r\n            makeId: \"\"\r\n        }\r\n    }\r\n    displayMakes(){\r\n        //data object is attached to props when we bind a query to the export\r\n        //changed data to getMakeQuery after adding compose\r\n        let data = this.props.getMakeQuery;\r\n        if(data.loading){\r\n            return <option disabled>loading makes</option>\r\n        } else {\r\n            return data.makes.map((make) => {\r\n                return (\r\n                    <option className=\"ant-select-dropdown-menu-item\" key={make.id} value={make.id}>{make.name}</option>\r\n                )\r\n            })\r\n        }\r\n    }\r\n    submitForm(e) {\r\n        e.preventDefault();\r\n        //the name of this function inside props is given inside the object, inside the compose function\r\n        // at the bottom\r\n        // Inside this function we can pass the graphql variables that will be taken into account while\r\n        //running the query\r\n        console.log(this.state)\r\n        this.props.addCarMutation({\r\n            variables: {\r\n                model: this.state.model,\r\n                type: this.state.type,\r\n                manufactureDate: parseInt(this.state.manufactureDate),\r\n                makeId: this.state.makeId\r\n            },\r\n            refetchQueries: [{query: getCarQuery}]\r\n        });\r\n    }\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Divider />\r\n                <h1>Add a car!</h1>\r\n               <form onSubmit={this.submitForm.bind(this)} id=\"add-car\">\r\n                   <div className=\"field\">\r\n                       <label>Car Model:</label>\r\n                       {/* e is the event, target is the input, and value is what I type */}\r\n                       <input className=\"ant-input\" type=\"text\" onChange={(e) => this.setState({model: e.target.value})} />\r\n                   </div>\r\n                   <div className=\"field\">\r\n                       <label>Car type:</label>\r\n                       <input className=\"ant-input\" type=\"text\" onChange={(e) => this.setState({type: e.target.value})} />\r\n                   </div>\r\n                   \r\n                   <div className=\"field\">\r\n                       <label>Car manufacture date:</label>\r\n                       <input className=\"ant-input\" type=\"number\" onChange={(e) => this.setState({manufactureDate: e.target.value})}/>\r\n                   </div>\r\n                   <div className=\"field\">\r\n                       <label>Make</label>\r\n                       <select className=\"ant-select ant-select-selected ant-input\" onChange={(e) => this.setState({makeId: e.target.value})}>\r\n                       <option className=\"ant-select-dropdown-menu-item-group\">select make</option>\r\n                       {this.displayMakes()}\r\n                       </select>\r\n                   </div>\r\n                   \r\n                   <button className=\"ant-btn ant-btn-primary ant-btn-circle ant-btn-lg ant-btn-icon-only\" style={{marginTop: \"20px\"}} type=\"primary\" shape=\"circle\">\r\n                   <Icon type=\"plus\" />\r\n                    </button>\r\n                   \r\n               </form> \r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n//How to bind to queries to a component\r\nexport default compose(\r\n    graphql(getMakeQuery, {name:\"getMakeQuery\"}),\r\n    graphql(addCarMutation, {name: \"addCarMutation\"})\r\n\r\n)(AddCar);","import React from 'react';\r\nimport ApolloClient from 'apollo-boost';\r\nimport {ApolloProvider} from '@apollo/react-hooks';\r\nimport { Typography, Divider } from 'antd';\r\nimport \"antd/dist/antd.css\";\r\n\r\nimport \"./App.css\";\r\n\r\n\r\nimport CarList from './components/CarList';\r\nimport AddCar from './components/AddCar';\r\n\r\n\r\n//apollo client setup\r\nconst client = new ApolloClient({\r\n  //this is the endpoint where we have our graphql queries\r\n  uri: 'https://car-graphql.herokuapp.com/graphql',\r\n})\r\n\r\nclass App extends React.Component {\r\n  render() {\r\n    const { Title } = Typography;\r\n    return (\r\n      <ApolloProvider client={client}>\r\n      <div id=\"main\" >\r\n\r\n      <Title level={1}>My Favourite Cars</Title>\r\n      <Divider /> \r\n      <CarList/>\r\n\r\n      <AddCar/>\r\n\r\n\r\n      </div>\r\n      </ApolloProvider>\r\n    )\r\n  }\r\n}\r\n\r\nexport default App","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\n\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\n\r\n"],"sourceRoot":""}